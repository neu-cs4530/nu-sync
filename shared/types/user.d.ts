import { Request } from 'express';
import { ObjectId } from 'mongodb';

/**
 * Represents a request to get the mutual friends between two users. One is the current user, and the other is the viewed user.
 * - `currentUser`: The username of the user who is currently logged in.
 * - `viewedUser`: The username of the user whose profile is being viewed.
 */
export interface GetMutualFriendsRequest extends Request {
  params: {
    currentUser: string;
    viewedUser: string;
  };
}

/**
 * Represents user credentials for authentication.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 */
export interface UserCredentials {
  username: string;
  password: string;
}

export interface QuietHours {
  start: string; // "HH:mm"
  end: string; // "HH:mm"
}

/**
 * Represents a user document, including user credentials and additional details.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of the user (optional).
 * - `spotifyId`: The Spotify user ID for integration with Spotify (optional).
 * - `musicPreferences`: The user's music preferences (optional).
 * - `privacySettings`: The user's privacy settings (optional).
 * - `playlists`: The user's created playlists (optional).
 * - `currentlyPlaying`: The currently playing track on Spotify (optional).
 * - `playlistHistory`: The history of playlists the user has interacted with (optional).
 */
export interface User extends UserCredentials {
  dateJoined: Date;
  biography?: string;
  spotifyId?: string | null;
  spotifyAccessToken?: string;
  spotifyRefreshToken?: string;
  musicPreferences?: string[];
  privacySettings?: PrivacySettings;
  onlineStatus?: OnlineStatus;
  quietHours?: QuietHours;
  oldStatus?: OnlineStatus;
  playlists?: Playlist[];
  currentlyPlaying?: CurrentlyPlayingTrack;
  playlistHistory?: PlaylistHistory[];
  spotifyConflictTemp?: boolean;
  spotifyConflictUserId?: string;
  blockedUsers?: string[];
}

/**
 * Represents a user document in the database.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of the user (optional).
 * - `spotifyId`: The Spotify user ID for integration with Spotify (optional).
 * - `musicPreferences`: The user's music preferences (optional).
 * - `privacySettings`: The user's privacy settings (optional).
 * - `playlists`: The user's created playlists (optional).
 * - `currentlyPlaying`: The currently playing track on Spotify (optional).
 * - `playlistHistory`: The history of playlists the user has interacted with (optional).
 * - `_id`: The unique identifier for the user, generated by MongoDB.
 * - 'friends': An array of usernames representing friends of the user.
 */
export interface DatabaseUser extends User {
  _id: ObjectId;
  friends: string[];
  blockedUsers: string[];
}

/**
 * Express request for user login, containing user credentials.
 * - `username`: The username submitted in the request (body).
 * - `password`: The password submitted in the request (body).
 * - `biography`: Optional field for biography information (body).
 */
export interface UserRequest extends Request {
  body: {
    username: string;
    password: string;
    biography?: string;
  };
}

/**
 * Express request for querying a user by their username.
 * - `username`: The username provided as a route parameter.
 */
export interface UserByUsernameRequest extends Request {
  params: {
    username: string;
  };
}

/**
 * Represents a "safe" user object that excludes sensitive information like the password.
 */
export type SafeDatabaseUser = Omit<DatabaseUser, 'password'>;

/**
 * Represents the response for user-related operations.
 * - `SafeDatabaseUser`: A user object without sensitive data if the operation is successful.
 * - `error`: An error message if the operation fails.
 */
export type UserResponse = SafeDatabaseUser | { error: string };

/**
 * Represents the response for multiple user-related operations.
 * - `SafeDatabaseUser[]`: A list of user objects without sensitive data if the operation is successful.
 * - `error`: An error message if the operation fails.
 */
export type UsersResponse = SafeDatabaseUser[] | { error: string };

/**
 * Express request for updating a user's biography.
 * - `username`: The username whose biography is being updated (body).
 * - `biography`: The new biography content to be set (body).
 */
export interface UpdateBiographyRequest extends Request {
  body: {
    username: string;
    biography: string;
  };
}

/**
 * Represents the user's privacy settings.
 * - `profileVisibility`: Controls the visibility of the user's profile.
 */
export interface PrivacySettings {
  profileVisibility: 'public' | 'private';
}

/**
 * Express request for updating a user's privacy settings.
 * - `username`: The username whose privacy settings are being updated (body).
 * - `privacySettings`: The new privacy settings to be applied (body).
 */
export interface UpdatePrivacySettingsRequest extends Request {
  body: {
    username: string;
    privacySettings: PrivacySettings;
  };
}

/**
 * Represents a user-created playlist.
 * - `playlistId`: The ID of the playlist.
 * - `playlistName`: The name of the playlist.
 * - `tracks`: The list of tracks in the playlist.
 */
export interface Playlist {
  playlistId: string;
  playlistName: string;
  tracks: Track[];
}

/**
 * Represents a track in a playlist.
 * - `trackId`: The ID of the track.
 * - `trackName`: The name of the track.
 * - `artistName`: The name of the artist.
 * - `albumName`: The name of the album.
 */
export interface Track {
  trackId: string;
  trackName: string;
  artistName: string;
  albumName: string;
}

/**
 * Represents the currently playing track on Spotify.
 * - `trackId`: The ID of the track.
 * - `trackName`: The name of the track.
 * - `artistName`: The name of the artist.
 * - `albumName`: The name of the album.
 * - `progressMs`: The progress of the track in milliseconds.
 */
export interface CurrentlyPlayingTrack {
  trackId: string;
  trackName: string;
  artistName: string;
  albumName: string;
  progressMs: number;
}

/**
 * Represents a playlist history entry.
 * - `playlistId`: The ID of the playlist.
 * - `playlistName`: The name of the playlist.
 * - `lastPlayed`: The date when the playlist was last played.
 */
export interface PlaylistHistory {
  playlistId: string;
  playlistName: string;
  lastPlayed: Date;
}

/**
 * Express request for updating a user's online status.
 */
export interface UpdateOnlineStatusRequest extends Request {
  body: {
    username: string;
    onlineStatus: {
      status: 'online' | 'away' | 'busy' | 'invisible';
      busySettings?: {
        muteScope: 'friends-only' | 'everyone';
      };
    };
  };
}

/**
 * Express request for updating a user's online status.
 */
export interface UpdateQuietHoursRequest extends Request {
  body: {
    username: string;
    quietHours?: {
      start: string; // "HH:mm"
      end: string; // "HH:mm"
    };
  };
}

export interface BlockUserRequest extends Request {
  body: {
    username: string; // Username of the user performing the block
    userToBlock: string; // Username of the user to be blocked
  };
}
